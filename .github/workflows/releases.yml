name: Coincube Release Workflow

permissions:
  contents: write

on:
  push:
    tags:
      - "v*.*"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ONRAMPER_API_KEY: ${{ secrets.ONRAMPER_API_KEY }}
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

jobs:
  compile-and-package:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
          - os: macos-latest

    name: upload-binaries
    if: github.repository == 'coincubetech/liana'
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false

      # Install necessary tools
      - uses: milliewalky/setup-7-zip@v2
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-wix,apple-codesign,jaq

      # Key run with liana-gui version, for caching and release artefacts
      - name: Set arbitrary release name to package version of liana-gui
        shell: bash
        run: |
          version=$(cargo metadata --no-deps --format-version 1 | jaq -r '.packages[] | select(.name=="liana-gui") | .version')
          echo "VAULT_VERSION=$version" >> $GITHUB_ENV

      - name: Cache Cargo build directories
        uses: actions/cache@v4
        with:
          key: cargo-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: cargo-${{ runner.os }}-
          path: ./target

      # Create gh release
      - uses: taiki-e/create-gh-release-action@v1
        with:
          title: v${{ env.VAULT_VERSION }}
          ref: ${{ github.ref }}
          branch: master

      # For Linux upload binary and libraries in a compressed tarball
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libudev-dev pkg-config

      - uses: taiki-e/upload-rust-binary-action@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          package: liana-gui
          bin: coincube-vault
          archive: Coincube-Vault-$target
          target: x86_64-unknown-linux-gnu
          include: LICENCE,README.md,lib
          profile: app-release
          locked: true

      # Generate icons for macOS and Windows
      - name: Generate Icons for Installers
        if: matrix.os != 'ubuntu-latest'
        run: |
          pip install pillow icnsutil
          python ./contrib/release/macos/icns-creator.py

      - name: Package and release .msi installer for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install wixtoolset --version=3.14.1 --yes
          cargo wix --package liana-gui --profile app-release --output "target\wix\Coincube-Vault-x86_64-pc-windows-msvc.msi" --include ./contrib/release/wix/main.wxs --nocapture -v

      - name: Upload .msi to release
        if: matrix.os == 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "target/wix/Coincube-Vault-x86_64-pc-windows-msvc.msi"
          tag: ${{ github.ref }}
          body: "Installers for Windows, macOS and Linux"
          overwrite: true

      # For macOS upload a signed and notarized dmg
      - name: Compile Project for macOS arm64
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --package liana-gui --profile app-release

      - name: Copy Executable, Icons and Extra Metadata into .app folder
        if: matrix.os == 'macos-latest'
        run: |
          unzip ./contrib/release/macos/Vault.app.zip
          sed -i '' "s/VERSION_PLACEHOLDER/${{ env.VAULT_VERSION }}/g" ./Vault.app/Contents/Info.plist
          mv target/app-release/coincube-vault ./Vault.app/Contents/MacOS/Vault
          mv ./contrib/release/macos/Vault.icns ./Vault.app/Contents/Resources/Vault.icns

      - name: CodeSign macOS App Bundle
        if: matrix.os == 'macos-latest'
        env:
          P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.CERTIFICATE_P12_PASSWORD }}
        run: |
          echo "$P12_BASE64" | base64 -d > signing_certificate.p12
          echo "$P12_PASSWORD" > signing_certificate.password
          rcodesign sign --p12-file signing_certificate.p12 --p12-password-file signing_certificate.password --code-signature-flags runtime Vault.app
          rm signing_certificate.p12 signing_certificate.password

      - name: Notarize and Staple macOS App bundle
        if: matrix.os == 'macos-latest'
        run: |
          base64 -D <<< "${{ secrets.APPSTORECONNECT_KEY_JSON }}" > appstoreconnect_key.json
          rcodesign notary-submit --api-key-path appstoreconnect_key.json --max-wait-seconds 1800 --staple Vault.app
          spctl --verbose=4 --assess --type execute Vault.app
          rm appstoreconnect_key.json
          ditto -c -k --sequesterRsrc --keepParent Vault.app Coincube-Vault-aarch64-apple-darwin.app.zip

      - name: Upload .app.zip file as Release Artefact
        if: matrix.os == 'macos-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "Coincube-Vault-aarch64-apple-darwin.app.zip"
          tag: ${{ github.ref }}
          overwrite: true
          body: "macOS App Bundle (arm64)"
